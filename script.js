document.addEventListener('DOMContentLoaded', () => {
    // データセット
    const data = [
        // ... 既存のデータセット（変更なし） ...
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'ジャストパリィ', '相手の行動 分類': 'ガード系', '相手の行動 基本': 'パターン少', '自分の行動': '詐欺飛び', '自分の行動 分類': '打撃系', '自分の行動 基本': '', '評価点': '✕', '詳細・評価の根拠': '相手にジャストパリィされると、確定反撃は受けないものの、有利状況を崩され、攻め継続が難しくなる。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'ファジーガード（中下段）', '相手の行動 分類': 'ガード系', '相手の行動 基本': 'パターン少', '自分の行動': '中下段択', '自分の行動 分類': '打撃系', '自分の行動 基本': 'パターン少', '評価点': '✕', '詳細・評価の根拠': '相手にファジーガードで中段と下段の両方に対応され、防御を崩すことができない。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': '後ろ下がり', '相手の行動 分類': '回避・移動系', '相手の行動 基本': 'パターン少', '自分の行動': '歩き投げ', '自分の行動 分類': '投げ系', '自分の行動 基本': '', '評価点': '✕', '詳細・評価の根拠': '相手に後ろ下がりで投げをスカされてしまい、投げの硬直中に確定反撃を受けてしまう。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'Dリバーサル', '相手の行動 分類': '無敵・防御系', '相手の行動 基本': '', '自分の行動': '打撃重ね', '自分の行動 分類': '打撃系', '自分の行動 基本': '', '評価点': '◎', '詳細・評価の根拠': '攻撃側が隙の少ない技を持続で重ねている場合、発生の遅いDリバーサルは間に合わず、打撃をヒットさせ、ダメージを与える。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'Dリバーサル', '相手の行動 分類': '無敵・防御系', '相手の行動 基本': '', '自分の行動': '投げ重ね', '自分の行動 分類': '投げ系', '自分の行動 基本': '', '評価点': '✕', '詳細・評価の根拠': 'Dリバーサルは無敵技の一種であり、投げに対しては無敵時間で投げを潰されてしまい、相手を押し返されて自分のターンを失う。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'ガード', '相手の行動 分類': 'ガード系', '相手の行動 基本': '基本', '自分の行動': '打撃重ね', '自分の行動 分類': '打撃系', '自分の行動 基本': '基本', '評価点': '△', '詳細・評価の根拠': '相手に攻撃をガードさせる。持続重ねや重ねる技によっては有利フレームが継続する。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'ガード', '相手の行動 分類': 'ガード系', '相手の行動 基本': '基本', '自分の行動': '遅らせ打撃', '自分の行動 分類': '打撃系', '自分の行動 基本': '', '評価点': '△', '詳細・評価の根拠': '相手に攻撃をガードさせる。持続重ねや重ねる技によっては有利フレームが継続する。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'ガード', '相手の行動 分類': 'ガード系', '相手の行動 基本': '基本', '自分の行動': '投げ重ね', '自分の行動 分類': '投げ系', '自分の行動 基本': '基本', '評価点': '○', '詳細・評価の根拠': '相手がガードを選択した場合、投げが通るためダメージと状況有利を得られます。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'ガード', '相手の行動 分類': 'ガード系', '相手の行動 基本': '基本', '自分の行動': '歩き投げ', '自分の行動 分類': '投げ系', '自分の行動 基本': '', '評価点': '○', '詳細・評価の根拠': '相手のガードを崩し、投げることができる。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'ガード', '相手の行動 分類': 'ガード系', '相手の行動 基本': '基本', '自分の行動': 'シミー', '自分の行動 分類': '揺さぶり・投げ抜け系', '自分の行動 基本': '基本', '評価点': '△', '詳細・評価の根拠': '相手にガードされ、攻め継続は可能だが直接的なダメージは発生しない。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'ガード', '相手の行動 分類': 'ガード系', '相手の行動 基本': '基本', '自分の行動': '垂直ジャンプ', '自分の行動 分類': '回避・移動系', '自分の行動 基本': '', '評価点': '△', '詳細・評価の根拠': '相手にガードされ、攻めは継続する。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'パリィ', '相手の行動 分類': 'ガード系', '相手の行動 基本': '基本', '自分の行動': '打撃重ね', '自分の行動 分類': '打撃系', '自分の行動 基本': '基本', '評価点': '✕', '詳細・評価の根拠': '相手にジャストパリィされると、自分の硬直から反撃を受ける。通常パリィでも有利フレームを失う。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'パリィ', '相手の行動 分類': 'ガード系', '相手の行動 基本': '基本', '自分の行動': '投げ重ね', '自分の行動 分類': '投げ系', '自分の行動 基本': '基本', '評価点': '◎', '詳細・評価の根拠': '相手がパリィを選択した場合、投げが通るためダメージと状況有利を得られます。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'パリィ', '相手の行動 分類': 'ガード系', '相手の行動 基本': '基本', '自分の行動': '歩き投げ', '自分の行動 分類': '投げ系', '自分の行動 基本': '', '評価点': '◎', '詳細・評価の根拠': '相手のパリィを崩し、パニッシュカウンターとして投げることができる。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'パリィ', '相手の行動 分類': 'ガード系', '相手の行動 基本': '基本', '自分の行動': 'シミー', '自分の行動 分類': '揺さぶり・投げ抜け系', '自分の行動 基本': '基本', '評価点': '◎', '詳細・評価の根拠': '相手のパリィを見てから投げることで、パニッシュカウンターとして投げられる。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'ファジーガード', '相手の行動 分類': 'ガード系', '相手の行動 基本': 'パターン少', '自分の行動': '遅らせ打撃（下段）', '自分の行動 分類': '打撃系', '自分の行動 基本': 'パターン少', '評価点': '◎', '詳細・評価の根拠': 'ファジーガードは「遅らせて立ちガード」をする防御であるため、崩すためには「遅らせ下段」が必要。遅らせ下段はリスキーだが、ファジーガードを崩せる選択肢である。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': '遅らせグラップ', '相手の行動 分類': 'ガード系', '相手の行動 基本': '基本', '自分の行動': '打撃重ね', '自分の行動 分類': '打撃系', '自分の行動 基本': '基本', '評価点': '△', '詳細・評価の根拠': '相手に攻撃をガードさせる。持続重ねや重ねる技によっては有利フレームが継続する。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': '遅らせグラップ', '相手の行動 分類': 'ガード系', '相手の行動 基本': '基本', '自分の行動': '遅らせ打撃', '自分の行動 分類': '打撃系', '自分の行動 基本': '', '評価点': '◎', '詳細・評価の根拠': '相手の遅らせグラップを潰し、ダメージを与える。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': '遅らせグラップ', '相手の行動 分類': 'ガード系', '相手の行動 基本': '基本', '自分の行動': '投げ重ね', '自分の行動 分類': '投げ系', '自分の行動 基本': '基本', '評価点': '△', '詳細・評価の根拠': '相手に投げ抜けされ、状況が五分になる。相手にドライブゲージを回復できてしまう。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': '遅らせグラップ', '相手の行動 分類': 'ガード系', '相手の行動 基本': '基本', '自分の行動': '歩き投げ', '自分の行動 分類': '投げ系', '自分の行動 基本': '', '評価点': '△', '詳細・評価の根拠': '相手に投げ抜けされ、状況が五分になる。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': '遅らせグラップ', '相手の行動 分類': 'ガード系', '相手の行動 基本': '基本', '自分の行動': 'シミー', '自分の行動 分類': '揺さぶり・投げ抜け系', '自分の行動 基本': '基本', '評価点': '◎', '詳細・評価の根拠': '相手の遅らせグラップを誘い、投げスカリをパニッシュカウンターで狩って大ダメージコンボに繋げられる。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': '遅らせグラップ', '相手の行動 分類': 'ガード系', '相手の行動 基本': '基本', '自分の行動': '垂直ジャンプ', '自分の行動 分類': '回避・移動系', '自分の行動 基本': '', '評価点': '◎', '詳細・評価の根拠': '相手の投げ抜けスカりに垂直ジャンプ攻撃をカウンターヒットさせ、大ダメージコンボにつながる（原人狩り）。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': '（自分が攻めで投げ重ねをした場合）', '相手の行動 分類': '回避・移動系', '相手の行動 基本': '状況限定（TIPS）', '自分の行動': '（投げ重ね後）対空', '自分の行動 分類': '打撃系', '自分の行動 基本': '状況限定（TIPS）', '評価点': '◎', '詳細・評価の根拠': '自分が投げを重ねた場合、投げが通る OR 投げ抜けされる OR 相手がジャンプしている の3パターンのみ。対空に集中できる。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'バクステ', '相手の行動 分類': '回避・移動系', '相手の行動 基本': '基本', '自分の行動': '打撃重ね', '自分の行動 分類': '打撃系', '自分の行動 基本': '基本', '評価点': '◎', '詳細・評価の根拠': '相手のバクステに打撃をヒットさせ、ダメージを与える。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'バクステ', '相手の行動 分類': '回避・移動系', '相手の行動 基本': '基本', '自分の行動': '遅らせ打撃', '自分の行動 分類': '打撃系', '自分の行動 基本': '', '評価点': '◎', '詳細・評価の根拠': '相手のバクステを潰し、ダメージを与える。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'バクステ', '相手の行動 分類': '回避・移動系', '相手の行動 基本': '基本', '自分の行動': '投げ重ね', '自分の行動 分類': '投げ系', '自分の行動 基本': '基本', '評価点': '✕', '詳細・評価の根拠': '相手に投げを回避され、投げスカリに反撃を受ける。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'バクステ', '相手の行動 分類': '回避・移動系', '相手の行動 基本': '基本', '自分の行動': '歩き投げ', '自分の行動 分類': '投げ系', '自分の行動 基本': '', '評価点': '○', '詳細・評価の根拠': '相手に投げを回避されるが、読み合いは継続する。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'バクステ', '相手の行動 分類': '回避・移動系', '相手の行動 基本': '基本', '自分の行動': 'シミー', '自分の行動 分類': '揺さぶり・投げ抜け系', '自分の行動 基本': '基本', '評価点': '△', '詳細・評価の根拠': '相手にバクステで距離を離され、状況が五分になる。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'バックジャンプ', '相手の行動 分類': '回避・移動系', '相手の行動 基本': '基本', '自分の行動': '打撃重ね', '自分の行動 分類': '打撃系', '自分の行動 基本': '基本', '評価点': '◎', '詳細・評価の根拠': '相手のバックジャンプのジャンプ移行フレーム中に打撃をヒットさせ、ダメージを与える。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'バックジャンプ', '相手の行動 分類': '回避・移動系', '相手の行動 基本': '基本', '自分の行動': '投げ重ね', '自分の行動 分類': '投げ系', '自分の行動 基本': '基本', '評価点': '✕', '詳細・評価の根拠': '相手に投げを回避され、投げスカリに反撃を受ける。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'バックジャンプ', '相手の行動 分類': '回避・移動系', '相手の行動 基本': '基本', '自分の行動': '歩き投げ', '自分の行動 分類': '投げ系', '自分の行動 基本': '', '評価点': '○', '詳細・評価の根拠': '相手に投げを回避されるが、読み合いは継続する。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'バックジャンプ', '相手の行動 分類': '回避・移動系', '相手の行動 基本': '基本', '自分の行動': 'シミー', '自分の行動 分類': '揺さぶり・投げ抜け系', '自分の行動 基本': '基本', '評価点': '△', '詳細・評価の根拠': '相手にバックジャンプで距離を離され、状況が五分になる。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'ファジージャンプ', '相手の行動 分類': '回避・移動系', '相手の行動 基本': '', '自分の行動': '打撃重ね', '自分の行動 分類': '打撃系', '自分の行動 基本': '基本', '評価点': '△', '詳細・評価の根拠': '相手に攻撃をガードさせる。持続重ねや重ねる技によっては有利フレームが継続する。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'ファジージャンプ', '相手の行動 分類': '回避・移動系', '相手の行動 基本': '', '自分の行動': '投げ重ね', '自分の行動 分類': '投げ系', '自分の行動 基本': '基本', '評価点': '○', '詳細・評価の根拠': '相手のファジージャンプを投げることができる。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'ファジージャンプ', '相手の行動 分類': '回避・移動系', '相手の行動 基本': '', '自分の行動': 'シミー', '自分の行動 分類': '揺さぶり・投げ抜け系', '自分の行動 基本': '基本', '評価点': '✕', '詳細・評価の根拠': '相手にジャンプでシミーを回避され、攻め継続が難しい。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'ファジージャンプ', '相手の行動 分類': '回避・移動系', '相手の行動 基本': '', '自分の行動': '歩き投げ', '自分の行動 分類': '投げ系', '自分の行動 基本': '', '評価点': '✕', '詳細・評価の根拠': '相手がファジージャンプを選択した場合、歩き投げを避けられてしまうためダメージを与えることはできません。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'ファジージャンプ', '相手の行動 分類': '回避・移動系', '相手の行動 基本': '', '自分の行動': '遅らせ打撃', '自分の行動 分類': '打撃系', '自分の行動 基本': '', '評価点': '◎', '詳細・評価の根拠': '相手のファジージャンプは遅らせ打撃に潰されてしまう可能性があるため、大ダメージを狙うことができます。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': '垂直ジャンプ', '相手の行動 分類': '回避・移動系', '相手の行動 基本': 'パターン少', '自分の行動': '歩き投げ', '自分の行動 分類': '投げ系', '自分の行動 基本': '', '評価点': '✕', '詳細・評価の根拠': '相手に垂直ジャンプで投げを回避され、原人狩りとして反撃を受ける。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': '歩き投げに後ろ下がり', '相手の行動 分類': '回避・移動系', '相手の行動 基本': 'パターン少', '自分の行動': '歩き投げ', '自分の行動 分類': '投げ系', '自分の行動 基本': '', '評価点': '✕', '詳細・評価の根拠': '相手の後ろ下がりで投げをスカされ、確定反撃を受ける。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': '歩き投げに後ろ下がり', '相手の行動 分類': '回避・移動系', '相手の行動 基本': 'パターン少', '自分の行動': '打撃重ね', '自分の行動 分類': '打撃系', '自分の行動 基本': '基本', '評価点': '◎', '詳細・評価の根拠': '歩こうとする相手には打撃が当たる。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'ファジー打撃', '相手の行動 分類': '打撃系', '相手の行動 基本': '', '自分の行動': '打撃重ね', '自分の行動 分類': '打撃系', '自分の行動 基本': '基本', '評価点': '△', '詳細・評価の根拠': '相手に攻撃をガードさせる。持続重ねや重ねる技によっては有利フレームが継続する。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'ファジー打撃', '相手の行動 分類': '打撃系', '相手の行動 基本': '', '自分の行動': '投げ重ね', '自分の行動 分類': '投げ系', '自分の行動 基本': '基本', '評価点': '○', '詳細・評価の根拠': '相手のファジー打撃を投げることができる。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'ファジー打撃', '相手の行動 分類': '打撃系', '相手の行動 基本': '', '自分の行動': 'シミー', '自分の行動 分類': '揺さぶり・投げ抜け系', '自分の行動 基本': '基本', '評価点': '✕', '詳細・評価の根拠': '相手のファジー打撃に被弾し、自分のターンを失う。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'ファジー打撃', '相手の行動 分類': '打撃系', '相手の行動 基本': '', '自分の行動': '歩き投げ', '自分の行動 分類': '投げ系', '自分の行動 基本': '', '評価点': '✕', '詳細・評価の根拠': '相手がファジー打撃を選択した場合、歩き投げを止められてしまうためダメージを与えることはできません。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'ファジー打撃', '相手の行動 分類': '打撃系', '相手の行動 基本': '', '自分の行動': '遅らせ打撃', '自分の行動 分類': '打撃系', '自分の行動 基本': '', '評価点': '◎', '詳細・評価の根拠': '相手のファジー打撃は遅らせ打撃に潰されてしまう可能性があるため、大ダメージを狙うことができます。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'ファジー打撃（下段）', '相手の行動 分類': '打撃系', '相手の行動 基本': 'パターン少', '自分の行動': 'シミー', '自分の行動 分類': '揺さぶり・投げ抜け系', '自分の行動 基本': '基本', '評価点': '✕', '詳細・評価の根拠': '相手のファジー下段に被弾し、自分のターンを失う。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'ファジー打撃（下段）', '相手の行動 分類': '打撃系', '相手の行動 基本': 'パターン少', '自分の行動': '投げ重ね', '自分の行動 分類': '投げ系', '自分の行動 基本': '基本', '評価点': '○', '詳細・評価の根拠': 'ファジー下段は「投げ重ね」に負ける。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'ファジー打撃（下段）', '相手の行動 分類': '打撃系', '相手の行動 基本': 'パターン少', '自分の行動': '打撃重ね', '自分の行動 分類': '打撃系', '自分の行動 基本': '基本', '評価点': '○', '詳細・評価の根拠': '初めにガードをするため「打撃重ね」に勝つ。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': '打撃暴れ', '相手の行動 分類': '打撃系', '相手の行動 基本': '基本', '自分の行動': '打撃重ね', '自分の行動 分類': '打撃系', '自分の行動 基本': '基本', '評価点': '◎', '詳細・評価の根拠': '相手の打撃暴れにカウンターヒットを奪い、コンボに繋げられる。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': '打撃暴れ', '相手の行動 分類': '打撃系', '相手の行動 基本': '基本', '自分の行動': '遅らせ打撃', '自分の行動 分類': '打撃系', '自分の行動 基本': '', '評価点': '✕', '詳細・評価の根拠': '相手の最速打撃暴れに被弾し、自分のターンを失う。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': '打撃暴れ', '相手の行動 分類': '打撃系', '相手の行動 基本': '基本', '自分の行動': '投げ重ね', '自分の行動 分類': '投げ系', '自分の行動 基本': '基本', '評価点': '◎', '詳細・評価の根拠': '相手が打撃暴れを選択した場合、投げが通るためダメージと状況有利を得られます。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': '打撃暴れ', '相手の行動 分類': '打撃系', '相手の行動 基本': '基本', '自分の行動': '歩き投げ', '自分の行動 分類': '投げ系', '自分の行動 基本': '', '評価点': '✕', '詳細・評価の根拠': '相手の打撃暴れに被弾し、自分のターンを失う。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': '打撃暴れ', '相手の行動 分類': '打撃系', '相手の行動 基本': '基本', '自分の行動': 'シミー※', '自分の行動 分類': '揺さぶり・投げ抜け系', '自分の行動 基本': '基本', '評価点': '✕', '詳細・評価の根拠': '相手がコパン暴れ ：△　相手が中足暴れ：✕' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': '対空', '相手の行動 分類': '打撃系', '相手の行動 基本': 'パターン少', '自分の行動': '垂直ジャンプ', '自分の行動 分類': '回避・移動系', '自分の行動 基本': '', '評価点': '✕', '詳細・評価の根拠': '相手に対空で落とされ、ダメージを受け、自分のターンを失う。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': '対空', '相手の行動 分類': '打撃系', '相手の行動 基本': 'パターン少', '自分の行動': 'ジャンプ攻撃フェイント', '自分の行動 分類': 'ガード系', '自分の行動 基本': '基本', '評価点': '○', '詳細・評価の根拠': '垂直ジャンプ攻撃に対する相手の対空を予測し、攻撃を出さずに着地してガードすれば、相手の対空（昇竜など）をガードし、確定反撃に繋げられる。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': '投げ暴れ', '相手の行動 分類': '投げ系', '相手の行動 基本': 'パターン少', '自分の行動': '垂直ジャンプ', '自分の行動 分類': '回避・移動系', '自分の行動 基本': '', '評価点': '◎', '詳細・評価の根拠': '相手の投げスカりに垂直ジャンプ攻撃をカウンターヒットさせ、大ダメージコンボにつながる（原人狩り）。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'Dリバーサル', '相手の行動 分類': '無敵・防御系', '相手の行動 基本': 'パターン少', '自分の行動': 'シミー', '自分の行動 分類': '揺さぶり・投げ抜け系', '自分の行動 基本': '基本', '評価点': '◎', '詳細・評価の根拠': '相手のDリバーサルをガードし、確定反撃に繋げられる。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'とんおり系の技', '相手の行動 分類': '無敵・防御系', '相手の行動 基本': '', '自分の行動': '打撃重ね', '自分の行動 分類': '打撃系', '自分の行動 基本': '基本', '評価点': '◎', '詳細・評価の根拠': '相手のとんおり系の技のジャンプ移行フレーム中に打撃をヒットさせ、ダメージを与える。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'とんおり系の技', '相手の行動 分類': '無敵・防御系', '相手の行動 基本': '', '自分の行動': '投げ重ね', '自分の行動 分類': '投げ系', '自分の行動 基本': '基本', '評価点': '✕', '詳細・評価の根拠': '相手のとんおり系の技に投げを回避され、特大ダメージの反撃を受ける。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': 'とんおり系の技', '相手の行動 分類': '無敵・防御系', '相手の行動 基本': '', '自分の行動': 'シミー', '自分の行動 分類': '揺さぶり・投げ抜け系', '自分の行動 基本': '基本', '評価点': '✕', '詳細・評価の根拠': '相手のとんおり系の技をガードし、確定反撃または不利を背負う。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': '無敵技暴れ', '相手の行動 分類': '無敵・防御系', '相手の行動 基本': '基本', '自分の行動': '打撃重ね', '自分の行動 分類': '打撃系', '自分の行動 基本': '基本', '評価点': '✕', '詳細・評価の根拠': '相手の無敵技暴れに被弾し、自分のターンを失う。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': '無敵技暴れ', '相手の行動 分類': '無敵・防御系', '相手の行動 基本': '基本', '自分の行動': '遅らせ打撃', '自分の行動 分類': '打撃系', '自分の行動 基本': '', '評価点': '✕', '詳細・評価の根拠': '相手の無敵技暴れに被弾し、自分のターンを失う。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': '無敵技暴れ', '相手の行動 分類': '無敵・防御系', '相手の行動 基本': '基本', '自分の行動': '投げ重ね', '自分の行動 分類': '投げ系', '自分の行動 基本': '基本', '評価点': '✕', '詳細・評価の根拠': '相手の無敵技暴れに被弾し、自分のターンを失う。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': '無敵技暴れ', '相手の行動 分類': '無敵・防御系', '相手の行動 基本': '基本', '自分の行動': '歩き投げ', '自分の行動 分類': '投げ系', '自分の行動 基本': '', '評価点': '✕', '詳細・評価の根拠': '相手の無敵技暴れに被弾し、自分のターンを失う。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': '無敵技暴れ', '相手の行動 分類': '無敵・防御系', '相手の行動 基本': '基本', '自分の行動': 'シミー', '自分の行動 分類': '揺さぶり・投げ抜け系', '自分の行動 基本': '基本', '評価点': '◎', '詳細・評価の根拠': '相手の無敵技暴れをガードし、大ダメージの確定反撃に繋げられる。' },
        { '自分の視点': '攻め側 / 起き攻め', '相手の行動': '無敵技暴れ', '相手の行動 分類': '無敵・防御系', '相手の行動 基本': '基本', '自分の行動': '詐欺飛び', '自分の行動 分類': '打撃系', '自分の行動 基本': 'パターン少', '評価点': '◎', '詳細・評価の根拠': '相手の無敵技暴れをガードし、大ダメージの確定反撃に繋げられる。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '垂直ジャンプ', '相手の行動 分類': '回避・移動系', '相手の行動 基本': '', '自分の行動': '対空', '自分の行動 分類': '打撃系', '自分の行動 基本': 'パターン少', '評価点': '◎', '詳細・評価の根拠': '相手の垂直ジャンプ（原人狩りなど）に対して対空技をヒットさせ、ダメージを与え、自分のターンとなる。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '垂直ジャンプ', '相手の行動 分類': '回避・移動系', '相手の行動 基本': '', '自分の行動': '投げ暴れ', '自分の行動 分類': '投げ系', '自分の行動 基本': 'パターン少', '評価点': '✕', '詳細・評価の根拠': '投げが漏れてしまい、垂直ジャンプ攻撃から大ダメージの反撃を食らう。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '（相手がバーンアウト中の場合）', '相手の行動 分類': '打撃系', '相手の行動 基本': '状況限定（TIPS）', '自分の行動': 'Dリバーサル', '自分の行動 分類': '無敵・防御系', '自分の行動 基本': '', '評価点': '◎', '詳細・評価の根拠': '相手がバーンアウト中の場合、Dリバーサルをガードされても−2Fとなり確定反撃を取られることがありません。低リスクで切り返しのチャンスを狙えます。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '（相手が発生6Fの中攻撃やコマ投げを持たない場合）', '相手の行動 分類': '打撃系', '相手の行動 基本': '状況限定（TIPS）', '自分の行動': 'Dリバーサル', '自分の行動 分類': '無敵・防御系', '自分の行動 基本': '', '評価点': '△＋', '詳細・評価の根拠': 'Dリバーサルはガード時−6Fですが、マリーザ、ブランカ、エド、ダルシム、JPなど発生6Fの中攻撃を持たないキャラ相手には確定反撃のダメージが低いため、選択肢として有効な場合があります。ただしコマンド投げ持ちには危険。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '詐欺飛び', '相手の行動 分類': '打撃系', '相手の行動 基本': 'パターン少', '自分の行動': '無敵技暴れ', '自分の行動 分類': '無敵・防御系', '自分の行動 基本': '', '評価点': '✕', '詳細・評価の根拠': '詐欺飛びは無敵技をガードできる。大ダメージの確定反撃を受ける。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '詐欺飛び', '相手の行動 分類': '打撃系', '相手の行動 基本': 'パターン少', '自分の行動': 'パリィ', '自分の行動 分類': 'ガード系', '自分の行動 基本': 'パターン少', '評価点': '△', '詳細・評価の根拠': '詐欺飛びに対する唯一の対抗手段はジャストパリィだが、成功しても攻撃側は+2F程度で確定反撃はない。ジャストパリィ後は後ろ投げ(入れ替え)、前ジャンプ(画面端脱出)、バクステなどできるがすべて相手の無敵技に負ける。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '打撃重ね', '相手の行動 分類': '打撃系', '相手の行動 基本': '基本', '自分の行動': 'ガード', '自分の行動 分類': 'ガード系', '自分の行動 基本': '基本', '評価点': '△', '詳細・評価の根拠': '攻撃をガードし、ダメージを受けない。攻め側は有利フレームを継続するが、守り側はドライブゲージ減少で耐えられる。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '打撃重ね', '相手の行動 分類': '打撃系', '相手の行動 基本': '基本', '自分の行動': '遅らせグラップ', '自分の行動 分類': 'ガード系', '自分の行動 基本': '基本', '評価点': '△', '詳細・評価の根拠': '打撃をガードし、投げ抜けは漏れない。攻め側は有利フレームを継続する。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '打撃重ね', '相手の行動 分類': '打撃系', '相手の行動 基本': '基本', '自分の行動': 'パリィ', '自分の行動 分類': 'ガード系', '自分の行動 基本': '基本', '評価点': '◎', '詳細・評価の根拠': '打撃重ねに対しては大きなリターンを得られます（ジャストパリィ成功で相手に硬直を与え、反撃に繋がるため）。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '打撃重ね', '相手の行動 分類': '打撃系', '相手の行動 基本': '基本', '自分の行動': 'ファジー打撃', '自分の行動 分類': '打撃系', '自分の行動 基本': '', '評価点': '△', '詳細・評価の根拠': '相手の打撃重ねをガードできる。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '打撃重ね', '相手の行動 分類': '打撃系', '相手の行動 基本': '基本', '自分の行動': 'ファジージャンプ', '自分の行動 分類': '回避・移動系', '自分の行動 基本': '', '評価点': '△', '詳細・評価の根拠': '相手の打撃重ねをガードできる。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '打撃重ね', '相手の行動 分類': '打撃系', '相手の行動 基本': '基本', '自分の行動': '無敵技暴れ', '自分の行動 分類': '無敵・防御系', '自分の行動 基本': '基本', '評価点': '○', '詳細・評価の根拠': '無敵時間で打撃を潰し、相手にダメージを与え、自分のターンとなる。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '打撃重ね', '相手の行動 分類': '打撃系', '相手の行動 基本': '基本', '自分の行動': 'Dリバーサル', '自分の行動 分類': '無敵・防御系', '自分の行動 基本': '', '評価点': '△＋', '詳細・評価の根拠': '無敵時間で打撃を潰し、相手を押し返す。※小技重ねや持続打撃重ねをされた場合、Dリバーサルがガードされてしまうことがあります。ガードされると−6Fを背負い、大ダメージを負う可能性があります。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '打撃重ね', '相手の行動 分類': '打撃系', '相手の行動 基本': '基本', '自分の行動': '打撃暴れ', '自分の行動 分類': '打撃系', '自分の行動 基本': '基本', '評価点': '✕', '詳細・評価の根拠': '打撃重ねられた場合、当然負けてダメージを受けてしまいます。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '打撃重ね', '相手の行動 分類': '打撃系', '相手の行動 基本': '基本', '自分の行動': 'とんおり系の技', '自分の行動 分類': '無敵・防御系', '自分の行動 基本': '', '評価点': '✕', '詳細・評価の根拠': 'とんおり系の技はジャンプ移行フレーム中に打撃を食らい、被弾する。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '打撃重ね', '相手の行動 分類': '打撃系', '相手の行動 基本': '基本', '自分の行動': 'バクステ', '自分の行動 分類': '回避・移動系', '自分の行動 基本': '基本', '評価点': '✕', '詳細・評価の根拠': 'バクステは打撃に対して無敵がなく、被弾する。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '打撃重ね', '相手の行動 分類': '打撃系', '相手の行動 基本': '基本', '自分の行動': 'バックジャンプ', '自分の行動 分類': '回避・移動系', '自分の行動 基本': '基本', '評価点': '✕', '詳細・評価の根拠': 'ジャンプの予備動作中に打撃を食らい、被弾する。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '遅らせ打撃', '相手の行動 分類': '打撃系', '相手の行動 基本': '', '自分の行動': 'ファジージャンプ', '自分の行動 分類': '回避・移動系', '自分の行動 基本': '', '評価点': '✕', '詳細・評価の根拠': '相手の遅らせ打撃がジャンプ移行フレームを狩り、空中ヒットとなる。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '遅らせ打撃', '相手の行動 分類': '打撃系', '相手の行動 基本': '', '自分の行動': '無敵技暴れ', '自分の行動 分類': '無敵・防御系', '自分の行動 基本': '基本', '評価点': '◎', '詳細・評価の根拠': '最速の無敵技は遅らせ打撃より早く発生するため、ヒットさせて大ダメージを与える。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '遅らせ打撃', '相手の行動 分類': '打撃系', '相手の行動 基本': '', '自分の行動': '打撃暴れ', '自分の行動 分類': '打撃系', '自分の行動 基本': '基本', '評価点': '◎', '詳細・評価の根拠': '最速の打撃暴れは遅らせ打撃より早く発生するため、ヒットさせてダメージを与える。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '遅らせ打撃', '相手の行動 分類': '打撃系', '相手の行動 基本': '', '自分の行動': 'ファジー打撃', '自分の行動 分類': '打撃系', '自分の行動 基本': '', '評価点': '✕', '詳細・評価の根拠': '相手の遅らせ打撃の場合、ファジー打撃は潰されてしまう可能性があります。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '遅らせ打撃（下段）', '相手の行動 分類': '打撃系', '相手の行動 基本': '', '自分の行動': 'ファジーガード（中下段）', '自分の行動 分類': 'ガード系', '自分の行動 基本': '', '評価点': '✕', '詳細・評価の根拠': '相手がファジーガードを崩すために遅らせ下段を撃ってきた場合、立ちガードのタイミングに噛み合わせられてしまい、ダメージを受ける可能性があります。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '中下段択', '相手の行動 分類': '打撃系', '相手の行動 基本': 'パターン少', '自分の行動': 'ファジーガード（中下段）', '自分の行動 分類': 'ガード系', '自分の行動 基本': '', '評価点': '○', '詳細・評価の根拠': '下段と中段の発生に時間差がある状況で、しゃがみガードから少し遅らせて立ちガードをすることで両対応できます。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '投げ重ね', '相手の行動 分類': '投げ系', '相手の行動 基本': '基本', '自分の行動': 'ガード', '自分の行動 分類': 'ガード系', '自分の行動 基本': '基本', '評価点': '✕', '詳細・評価の根拠': '投げをガードすることはできず、投げられる（通常投げは1200ダメージ）。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '投げ重ね', '相手の行動 分類': '投げ系', '相手の行動 基本': '基本', '自分の行動': '遅らせグラップ', '自分の行動 分類': 'ガード系', '自分の行動 基本': '基本', '評価点': '△', '詳細・評価の根拠': '投げ抜けが成立し、状況が五分になる。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '投げ重ね', '相手の行動 分類': '投げ系', '相手の行動 基本': '基本', '自分の行動': 'パリィ', '自分の行動 分類': 'ガード系', '自分の行動 基本': '基本', '評価点': '✕', '詳細・評価の根拠': 'パリィは投げを防ぐことができず、パニッシュカウンターとして投げられる。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '投げ重ね', '相手の行動 分類': '投げ系', '相手の行動 基本': '基本', '自分の行動': 'ファジー打撃', '自分の行動 分類': '打撃系', '自分の行動 基本': '', '評価点': '✕', '詳細・評価の根拠': '投げられる。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '投げ重ね', '相手の行動 分類': '投げ系', '相手の行動 基本': '基本', '自分の行動': 'ファジージャンプ', '自分の行動 分類': '回避・移動系', '自分の行動 基本': '', '評価点': '✕', '詳細・評価の根拠': '投げられる。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '投げ重ね', '相手の行動 分類': '投げ系', '相手の行動 基本': '基本', '自分の行動': '無敵技暴れ', '自分の行動 分類': '無敵・防御系', '自分の行動 基本': '基本', '評価点': '○', '詳細・評価の根拠': '無敵時間で投げを潰し、相手にダメージを与え、自分のターンとなる。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '投げ重ね', '相手の行動 分類': '投げ系', '相手の行動 基本': '基本', '自分の行動': 'Dリバーサル', '自分の行動 分類': '無敵・防御系', '自分の行動 基本': '', '評価点': '○', '詳細・評価の根拠': '無敵時間で投げを潰し、相手を押し返す。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '投げ重ね', '相手の行動 分類': '投げ系', '相手の行動 基本': '基本', '自分の行動': '打撃暴れ', '自分の行動 分類': '打撃系', '自分の行動 基本': '基本', '評価点': '✕', '詳細・評価の根拠': '投げ重ねが打撃暴れに勝つため、投げられる。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '投げ重ね', '相手の行動 分類': '投げ系', '自分の行動 基本': '基本', '自分の行動': 'とんおり系の技', '自分の行動 分類': '無敵・防御系', '自分の行動 基本': '', '評価点': '◎', '詳細・評価の根拠': '投げ重ねに対して特大リターンを生む。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '投げ重ね', '相手の行動 分類': '投げ系', '自分の行動 基本': '基本', '自分の行動': 'バクステ', '自分の行動 分類': '回避・移動系', '自分の行動 基本': '基本', '評価点': '○', '詳細・評価の根拠': '投げ無敵を利用して投げを回避し、相手の投げスカりに反撃できる。画面端では反撃を狙いやすい。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '投げ重ね', '相手の行動 分類': '投げ系', '自分の行動 基本': '基本', '自分の行動': 'バックジャンプ', '自分の行動 分類': '回避・移動系', '自分の行動 基本': '基本', '評価点': '○', '詳細・評価の根拠': 'ジャンプで投げを回避し、相手の投げスカりに反撃できる。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '歩き投げ', '相手の行動 分類': '投げ系', '相手の行動 基本': 'パターン少', '自分の行動': '後ろ下がり', '自分の行動 分類': '回避・移動系', '自分の行動 基本': 'パターン少', '評価点': '◎', '詳細・評価の根拠': '相手の歩き投げを後ろ下がりでスカし、硬直に反撃を確定させることができる。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '歩き投げ', '相手の行動 分類': '投げ系', '相手の行動 基本': '', '自分の行動': '垂直ジャンプ', '自分の行動 分類': '回避・移動系', '自分の行動 基本': '', '評価点': '◎', '詳細・評価の根拠': 'ジャンプで投げを回避し、着地からのジャンプ攻撃で相手に大ダメージを与えられる（原人狩り）。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '（自分がバーンアウト中のDリバーサル）', '相手の行動 分類': '無敵・防御系', '相手の行動 基本': '状況限定（TIPS）', '自分の行動': '垂直ジャンプ', '自分の行動 分類': '回避・移動系', '自分の行動 基本': '', '評価点': '○', '詳細・評価の根拠': '自分がバーンアウト中にDリバーサルをされた場合、リターンを得るには一転読みで垂直ジャンプや前ジャンプをする必要があります。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '（自分が守りでガードをした場合）', '相手の行動 分類': '揺さぶり・投げ抜け系', '相手の行動 基本': '状況限定（TIPS）', '自分の行動': '（ガード後）対空', '自分の行動 分類': '打撃系', '自分の行動 基本': '状況限定（TIPS）', '評価点': '◎', '詳細・評価の根拠': '被起き攻めでガードをしている場合は脳のリソースが空いているため、ジャンプを見て落としやすいです。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': 'シミー', '相手の行動 分類': '揺さぶり・投げ抜け系', '相手の行動 基本': '基本', '自分の行動': 'ガード', '自分の行動 分類': 'ガード系', '自分の行動 基本': '基本', '評価点': '△', '詳細・評価の根拠': '何も起こらない' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': 'シミー', '相手の行動 分類': '揺さぶり・投げ抜け系', '相手の行動 基本': '基本', '自分の行動': '遅らせグラップ', '自分の行動 分類': 'ガード系', '自分の行動 基本': '基本', '評価点': '✕', '詳細・評価の根拠': '相手のシミーが遅らせグラップを誘い、投げスカリをパニッシュカウンターで狩られて大ダメージを受ける。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': 'シミー', '相手の行動 分類': '揺さぶり・投げ抜け系', '相手の行動 基本': '基本', '自分の行動': 'パリィ', '自分の行動 分類': 'ガード系', '自分の行動 基本': '基本', '評価点': '✕', '詳細・評価の根拠': 'シミーされた場合、パリィを見てから投げることができるため読み負けになります。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': 'シミー', '相手の行動 分類': '揺さぶり・投げ抜け系', '相手の行動 基本': '基本', '自分の行動': 'ファジー打撃', '自分の行動 分類': '打撃系', '自分の行動 基本': '', '評価点': '○', '詳細・評価の根拠': 'シミーで後退している相手に打撃をヒットさせ、ダメージを与える。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': 'シミー', '相手の行動 分類': '揺さぶり・投げ抜け系', '相手の行動 基本': '基本', '自分の行動': 'ファジージャンプ', '自分の行動 分類': '回避・移動系', '自分の行動 基本': '', '評価点': '○', '詳細・評価の根拠': 'ジャンプでシミーを回避できる。中央であれば安全に距離を離せる。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': 'シミー', '相手の行動 分類': '揺さぶり・投げ抜け系', '相手の行動 基本': '基本', '自分の行動': 'ファジー打撃（下段）', '自分の行動 分類': '打撃系', '自分の行動 基本': 'パターン少', '評価点': '◎', '詳細・評価の根拠': 'シミー一点読みの場合、甘いシミーには下段が当たることがあり、キャンセルラッシュや必殺技に繋げれば特大リターンを生むことができます。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': 'シミー', '相手の行動 分類': '揺さぶり・投げ抜け系', '相手の行動 基本': '基本', '自分の行動': '無敵技暴れ', '自分の行動 分類': '無敵・防御系', '自分の行動 基本': '基本', '評価点': '✕', '詳細・評価の根拠': 'シミー（様子見）された場合、遅らせグラップと同様に大負けとなります。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': 'シミー', '相手の行動 分類': '揺さぶり・投げ抜け系', '相手の行動 基本': '基本', '自分の行動': 'Dリバーサル', '自分の行動 分類': '無敵・防御系', '自分の行動 基本': '', '評価点': '✕', '詳細・評価の根拠': '相手のシミーがDリバーサルをガードし、ガード時-6Fの不利状況から確定反撃を受ける。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': 'シミー', '相手の行動 基本': '基本', '自分の行動': '打撃暴れ※', '自分の行動 分類': '打撃系', '自分の行動 基本': '基本', '評価点': '○', '詳細・評価の根拠': 'コパン：△ 中足：◎ コパンはとくに相手に100%ダメージを通せるわけではなく、リスクを背負ってガードさせる意味は薄い。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': 'シミー', '相手の行動 基本': '基本', '自分の行動': 'とんおり系の技', '自分の行動 分類': '無敵・防御系', '自分の行動 基本': '', '評価点': '✕', '詳細・評価の根拠': 'シミーされた場合、とんおり系の技はガードされ、確定反撃または不利フレームを背負ってしまいます。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': 'シミー', '相手の行動 基本': '基本', '自分の行動': 'バクステ', '自分の行動 分類': '回避・移動系', '自分の行動 基本': '基本', '評価点': '△', '詳細・評価の根拠': '相手が様子見しているため、バクステしても何も起きない。距離を離して五分状況となる。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': 'シミー', '相手の行動 基本': '基本', '自分の行動': 'バックジャンプ', '自分の行動 分類': '回避・移動系', '自分の行動 基本': '基本', '評価点': '△', '詳細・評価の根拠': '相手が様子見しているため、バックジャンプしても何も起きない。距離を離して五分状況となる。' },
        { '自分の視点': '守り側 / 被起き攻め', '相手の行動': '画面端でのシミー', '相手の行動 分類': '揺さぶり・投げ抜け系', '相手の行動 基本': 'パターン少', '自分の行動': 'ファジージャンプ（前ジャンプ）', '自分の行動 分類': '回避・移動系', '自分の行動 基本': 'パターン少', '評価点': '◎', '詳細・評価の根拠': '画面端でのファジー前ジャンプは、対空される可能性はあるものの、位置を入れ替えることができる可能性があるため、非常に強力です。' },
    ];

    // 評価点の数値換算マップ
    const scoreMap = { '◎': 2, '○': 1.5, '△＋': 1.1, '△': 1, '✕': 0 };
    // 評価記号の優先順位マップ
    const symbolOrder = { '◎': 4, '○': 3, '△＋': 2, '△': 1, '✕': 0 };

    // 総合評価の閾値
    const overallScoreThresholds = {
        '◎': 3,
        '○': 2.5,
        '△': 2,
        '✕': 0
    };

    // UI要素の取得
    const playerSideRadios = document.querySelectorAll('input[name="player-side"]');
    const opponentActionsGrid = document.getElementById('opponent-actions-grid');
    const selectedCountNote = document.getElementById('selected-count-note');
    const showResultsBtn = document.getElementById('show-results-btn');
    const showTipsBtn = document.getElementById('show-tips-btn');
    const tipsDetails = document.getElementById('tips-details');
    const selectionScreen = document.getElementById('selection-screen');
    const resultsScreen = document.getElementById('results-screen');
    const backBtn = document.getElementById('back-btn');
    const expandAllBtn = document.getElementById('expand-all-btn');
    const resultsList = document.getElementById('results-list');
    const selectedActionsSummary = document.getElementById('selected-actions-summary');

    // 状態管理変数
    let playerSide = '攻め側 / 起き攻め';
    let selectedOpponentActions = [];
    let allResults = [];

    // 評価点から評価記号を取得
    const getOverallRating = (score) => {
        if (score >= overallScoreThresholds['◎']) return { symbol: '◎', class: 'ex' };
        if (score >= overallScoreThresholds['○']) return { symbol: '○', class: 'good' };
        if (score >= overallScoreThresholds['△']) return { symbol: '△', class: 'ok' };
        return { symbol: '✕', class: 'bad' };
    };

    // プレイヤー視点に応じた相手の行動リストを取得
    const getOpponentActions = (side) => {
        const uniqueActions = new Map();
        data.filter(d => d['自分の視点'] === side && d['相手の行動 基本'] !== '状況限定（TIPS）').forEach(d => {
            if (!uniqueActions.has(d['相手の行動'])) {
                uniqueActions.set(d['相手の行動'], {
                    name: d['相手の行動'],
                    category: d['相手の行動 分類'],
                    rank: d['相手の行動 基本']
                });
            }
        });
        const sortedActions = Array.from(uniqueActions.values()).sort((a, b) => {
            const rankOrder = { '基本': 1, '': 2, 'パターン少': 3 };
            return rankOrder[a.rank] - rankOrder[b.rank];
        });
        return sortedActions;
    };

    // 相手の行動選択肢を動的に生成
    const renderOpponentActions = () => {
        opponentActionsGrid.innerHTML = '';
        const actions = getOpponentActions(playerSide);
        actions.forEach(action => {
            const actionEl = document.createElement('div');
            actionEl.classList.add('action');
            actionEl.dataset.actionName = action.name;
            if (selectedOpponentActions.includes(action.name)) {
                actionEl.classList.add('selected');
            }
            actionEl.innerHTML = `<span class="name">${action.name}</span><span class="badge">${action.category}</span>`;
            actionEl.addEventListener('click', () => toggleOpponentAction(action.name, actionEl));
            opponentActionsGrid.appendChild(actionEl);
        });
    };

    // TIPSセクションを生成
    const renderTips = () => {
        tipsDetails.innerHTML = '';
        const tips = data.filter(d => d['相手の行動 基本'] === '状況限定（TIPS）');
        if (tips.length > 0) {
            tips.forEach(tip => {
                const tipEl = document.createElement('p');
                tipEl.innerHTML = `<strong>相手:</strong> ${tip['相手の行動']} <br> <strong>自分:</strong> ${tip['自分の行動']} <br> <strong>評価:</strong> ${tip['評価点']} <br> <strong>詳細:</strong> ${tip['詳細・評価の根拠']}`;
                tipsDetails.appendChild(tipEl);
            });
        } else {
            tipsDetails.innerHTML = '<p class="small">該当する特定の状況での対策はありません。</p>';
        }
    };

    // 相手の行動の選択切り替え
    const toggleOpponentAction = (actionName, element) => {
        const index = selectedOpponentActions.indexOf(actionName);
        if (index > -1) {
            selectedOpponentActions.splice(index, 1);
            element.classList.remove('selected');
        } else {
            if (selectedOpponentActions.length >= 2) {
                alert('選択できる行動は最大2つまでです。');
                return;
            }
            selectedOpponentActions.push(actionName);
            element.classList.add('selected');
        }
        selectedCountNote.textContent = `${selectedOpponentActions.length}/2 選択中`;
    };

    // 対策を計算し、結果を返す
    const calculateResults = () => {
        const results = new Map();
        const myActions = [...new Set(data.filter(d => d['自分の視点'] === playerSide).map(d => d['自分の行動']))];

        myActions.forEach(myAction => {
            let totalScore = 0;
            let breakdown = {};
            let dataCount = 0;

            selectedOpponentActions.forEach(opponentAction => {
                const match = data.find(d =>
                    d['自分の視点'] === playerSide &&
                    d['自分の行動'] === myAction &&
                    d['相手の行動'] === opponentAction
                );
                if (match) {
                    const score = scoreMap[match['評価点']];
                    breakdown[opponentAction] = { score, symbol: match['評価点'], detail: match['詳細・評価の根拠'] };
                    totalScore += score;
                    dataCount++;
                } else {
                    breakdown[opponentAction] = null;
                }
            });

            if (dataCount === 0) return;

            let finalScore = totalScore;
            let finalSymbol;
            let finalClass;
            let autoExpand = false;

            if (selectedOpponentActions.length === 1) {
                // 1つ選択の場合
                const singleScore = Object.values(breakdown).find(v => v !== null);
                finalScore = singleScore.score;
                finalSymbol = Object.keys(scoreMap).find(key => scoreMap[key] === singleScore.score);
                if (finalSymbol === '◎') finalClass = 'ex';
                else if (finalSymbol === '○') finalClass = 'good';
                else if (finalSymbol === '△' || finalSymbol === '△＋') finalClass = 'ok';
                else finalClass = 'bad';
                autoExpand = true;
            } else {
                // 2つ選択の場合
                if (dataCount === 1) {
                    // 片方のデータのみの場合
                    const singleScore = Object.values(breakdown).find(v => v !== null);
                    finalScore = singleScore.score;
                    finalSymbol = Object.keys(scoreMap).find(key => scoreMap[key] === singleScore.score);
                    if (finalSymbol === '◎') finalClass = 'ex';
                    else if (finalSymbol === '○') finalClass = 'good';
                    else if (finalSymbol === '△' || finalSymbol === '△＋') finalClass = 'ok';
                    else finalClass = 'bad';
                    autoExpand = true;
                } else {
                    // 両方のデータがある場合
                    const overall = getOverallRating(totalScore);
                    finalScore = totalScore;
                    finalSymbol = overall.symbol;
                    finalClass = overall.class;
                }
            }

            results.set(myAction, {
                score: finalScore,
                overallSymbol: finalSymbol,
                overallClass: finalClass,
                breakdown,
                myAction: myAction,
                autoExpand,
                dataCount // 新しいプロパティを追加
            });
        });

        // カスタムソートロジック
        return Array.from(results.values()).sort((a, b) => {
            // 1. 評価記号の順にソート (◎ > ○ > △ > ✕)
            const symbolA = symbolOrder[a.overallSymbol];
            const symbolB = symbolOrder[b.overallSymbol];
            if (symbolA !== symbolB) {
                return symbolB - symbolA;
            }

            // 2. 評価記号が同じ場合、データが両方あるものを優先 (dataCountが多い方を優先)
            if (b.dataCount !== a.dataCount) {
                return b.dataCount - a.dataCount;
            }

            // 3. それでも同じ場合は、元の評価点順にソート
            return b.score - a.score;
        });
    };

    // 結果画面の表示をレンダリング
    const renderResults = () => {
        resultsList.innerHTML = '';
        allResults.forEach(result => {
            const itemEl = document.createElement('div');
            itemEl.classList.add('result-item');

            const scoreSymbol = result.overallSymbol;
            const scoreClass = result.overallClass;

            const breakdownText = Object.keys(result.breakdown)
                .map(key => {
                    const bd = result.breakdown[key];
                    return bd ? `${key}${bd.symbol}` : `${key}:データなし`; // ここを修正
                })
                .filter(v => v !== null)
                .join('、');

            itemEl.innerHTML = `
                <div class="result-top ${result.autoExpand ? 'no-pointer' : ''}">
                    <div class="result-content">
                        <div class="result-title">${result.myAction}</div>
                        <div class="breakdown small">
                            ${breakdownText ? `(${breakdownText})` : ''}
                        </div>
                    </div>
                    <div class="result-score ${scoreClass}">
                        ${scoreSymbol}<span class="point">${result.score.toFixed(1)}</span>
                    </div>
                </div>
                <div class="details ${result.autoExpand ? '' : 'hidden'}">
                    </div>
            `;
            const detailsEl = itemEl.querySelector('.details');
            Object.keys(result.breakdown).forEach(key => {
                const bd = result.breakdown[key];
                const detailP = document.createElement('p');
                if (bd) {
                    detailP.innerHTML = `<strong>${key}:</strong> ${bd.detail}`;
                } else {
                    detailP.innerHTML = `<strong>${key}:</strong> 該当データがありません。`;
                }
                detailsEl.appendChild(detailP);
            });

            if (!result.autoExpand) {
                itemEl.querySelector('.result-top').addEventListener('click', () => {
                    detailsEl.classList.toggle('hidden');
                });
            }

            resultsList.appendChild(itemEl);
        });
    };

    // UIの切り替え
    const showSelectionScreen = () => {
        selectionScreen.classList.remove('hidden');
        resultsScreen.classList.add('hidden');
    };

    const showResultsScreen = () => {
        selectionScreen.classList.add('hidden');
        resultsScreen.classList.remove('hidden');
    };

    // イベントリスナー設定
    playerSideRadios.forEach(radio => {
        radio.addEventListener('change', (e) => {
            playerSide = e.target.value;
            selectedOpponentActions = [];
            renderOpponentActions();
            selectedCountNote.textContent = '0/2 選択中';
        });
    });

    showResultsBtn.addEventListener('click', () => {
        if (selectedOpponentActions.length === 0) {
            alert('相手の行動を1つ以上選択してください。');
            return;
        }

        allResults = calculateResults();
        if (allResults.length === 0) {
             alert('選択された組み合わせに対するデータが見つかりませんでした。');
             return;
        }

        selectedActionsSummary.textContent = `${selectedOpponentActions.join(' と ')}への対策`;
        renderResults();
        showResultsScreen();
    });

    backBtn.addEventListener('click', () => {
        showSelectionScreen();
    });

    expandAllBtn.addEventListener('click', () => {
        document.querySelectorAll('.details').forEach(details => {
            details.classList.toggle('hidden');
        });
        const buttonText = expandAllBtn.textContent;
        expandAllBtn.textContent = buttonText === 'すべて展開' ? 'すべて閉じる' : 'すべて展開';
    });

    showTipsBtn.addEventListener('click', () => {
        tipsDetails.classList.toggle('hidden');
    });

    // 初期表示
    renderOpponentActions();
    renderTips();
});
